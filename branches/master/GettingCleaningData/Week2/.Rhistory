News$Abstract = NULL
View(News)
News$Sex = NULL
News$NY = NULL
str(News)
# Make Train & Test
Train = News[News$isTest==0,]
Test = News[News$isTest==1,]
Train$isTest=NULL
Train$UniqueID=NULL
Test$isTest=NULL
Test$Popular = NULL
View(Test)
View(Train)
View(NewsTest)
View(Test)
View(Train)
View(Test)
Test$row.names = NULL
View(Test)
str(Test)
myglm = glm(Popular ~ ., data=Train, family=binomial)
summary(myglm)
pargs3 = Popular~.
#-----------------------------------------
library(doParallel)
# SET UP THE PARAMETER SPACE SEARCH GRID
ctrl <- trainControl(method="repeatedcv",          # use repeated 10fold cross validation
repeats=5,	                        # do 5 repititions of 10-fold cv
summaryFunction=twoClassSummary,	# Use AUC to pick the best model
classProbs=TRUE)
# Note that the default search grid selects 3 values of each tuning parameter
#
grid <- expand.grid(.interaction.depth = seq(1,7,by=2), # look at tree depths from 1 to 7
.n.trees=seq(10,100,by=5),	        # let iterations go from 10 to 100
.shrinkage=c(0.01,0.1))		# Try 2 values of the learning rate parameter
# BOOSTED TREE MODEL
set.seed(123)
registerDoParallel(4)		                        # Registrer a parallel backend for train
getDoParWorkers()
system.time(gbm.tune <- train(pargs3,
data = Train,
method = "gbm",
metric = "ROC",
trControl = ctrl,
tuneGrid=grid,
verbose=FALSE))
#---------------------------------
# SUPPORT VECTOR MACHINE MODEL
#
set.seed(123)
registerDoParallel(4,cores=4)
getDoParWorkers()
system.time(
svm.tune <- train(pargs3,
data = Train,
method = "svmRadial",
tuneLength = 9,		# 9 values of the cost function
preProc = c("center","scale"),
metric="ROC",
trControl=ctrl)	        # same as for gbm above
)
#---------------------------------
# RANDOM FOREST MODEL
#
set.seed(123)
registerDoParallel(4,cores=4)
getDoParWorkers()
system.time(
rf.tune <- train(pargs3,
data = Train,
method = "rf",
nodesize = 5,
ntree=500,
preProc = c("center","scale"),
metric="ROC",
trControl=ctrl)	        # same as for gbm above
)
#---------------------------------
# PCR MODEL
#
set.seed(123)
registerDoParallel(4,cores=4)
getDoParWorkers()
system.time(
pcr.tune <- train(pargs3,
data = Train,
method = "pcr",
tuneLength=20,
preProc = c("pca"),
metric="ROC",
trControl=ctrl)          # same as for gbm above
)
#---------------------------------
# glm MODEL
#
#
set.seed(123)
registerDoParallel(4,cores=4)
getDoParWorkers()
system.time(
glm.tune = train(pargs3,
data=Train,
method="glm",
family="binomial",
preProcess = c('center', 'scale'),
metric="ROC",
trControl=ctrl)
)
#-----------------------------------
# COMPARE MODELS USING RESAPMLING
# Having set the seed to 1 before running gbm.tune and svm.tune we have generated paired samplesfor comparing models using resampling.
#
# The resamples function in caret collates the resampling results from the two models
rValues <- resamples(list(svm=svm.tune,gbm=gbm.tune, rf=rf.tune, glm=glm.tune, pca=pcr.tune))
rValues$values
#---------------------------------------------
# BOXPLOTS COMPARING RESULTS
bwplot(rValues,metric="ROC")		# boxplot
# Predict
gbm.tune.pred = predict.train(gbm.tune, newdata=Test, type="prob")
gbm.tune.pred.prob = gbm.tune.pred[,2]
rf.tune.pred = predict.train(rf.tune, newdata=Test, type="prob")
rf.tune.pred.prob = rf.tune.pred[,2]
glm.tune.pred = predict.train(glm.tune, newdata=Test, type="prob")
glm.tune.pred.prob = glm.tune.pred[,2]
svm.tune.pred = predict.train(svm.tune, newdata=Test, type="prob")
svm.tune.pred.prob = svm.tune.pred[,2]
pcr.tune.pred = predict.train(pcr.tune, newdata=Test, type="prob")
pcr.tune.pred.prob = pcr.tune.pred[,2]
set.seed(123)
registerDoParallel(4,cores=4)
getDoParWorkers()
system.time(
glm.tune = train(pargs3,
data=Train,
method="glm",
family="binomial",
preProcess = c('center', 'scale'),
metric="ROC",
trControl=ctrl)
)
set.seed(123)
registerDoParallel(4,cores=4)
getDoParWorkers()
glm.tune = train(pargs3,
data=Train,
method="glm",
family="binomial",
preProcess = c('center', 'scale'),
metric="ROC",
trControl=ctrl)
rValues <- resamples(list(svm=svm.tune,gbm=gbm.tune, rf=rf.tune, glm=glm.tune, pca=pcr.tune))
rValues$values
#---------------------------------------------
# BOXPLOTS COMPARING RESULTS
bwplot(rValues,metric="ROC")		# boxplot
pcr.tune.pred = predict.train(pcr.tune, newdata=Test, type="prob")
pcr.tune.pred.prob = pcr.tune.pred[,2]
set.seed(123)
registerDoParallel(4,cores=4)
getDoParWorkers()
system.time(
pcr.tune <- train(pargs3,
data = Train,
method = "pcr",
tuneLength=20,
preProc = c("pca"),
metric="ROC",
trControl=ctrl)
)
rValues <- resamples(list(svm=svm.tune,gbm=gbm.tune, rf=rf.tune, glm=glm.tune, knn=knn.tune))
rValues$values
#---------------------------------------------
# BOXPLOTS COMPARING RESULTS
bwplot(rValues,metric="ROC")		# boxplot
# Predict
gbm.tune.pred = predict.train(gbm.tune, newdata=Test, type="prob")
gbm.tune.pred.prob = gbm.tune.pred[,2]
rf.tune.pred = predict.train(rf.tune, newdata=Test, type="prob")
rf.tune.pred.prob = rf.tune.pred[,2]
glm.tune.pred = predict.train(glm.tune, newdata=Test, type="prob")
glm.tune.pred.prob = glm.tune.pred[,2]
svm.tune.pred = predict.train(svm.tune, newdata=Test, type="prob")
svm.tune.pred.prob = svm.tune.pred[,2]
xGBM = .75
xRF = .25
xGLM = .0
xSVM = .0
xKNN = .0
Probability1 = (gbm.tune.pred.prob*xGBM+
rf.tune.pred.prob*xRF+
glm.tune.pred.prob*xGLM+
svm.tune.pred.prob*xSVM+
knn.tune.pred.prob*xKNN
)
MySubmission.Tuned = data.frame(UniqueID = NewsTest$UniqueID, Probability1)
write.csv(MySubmission.Tuned, "SubmissionTuned.csv", row.names=FALSE)
gbm.tune.pred = predict(gbm.tune, newdata=Test, type="prob")
gbm.tune.pred.prob = gbm.tune.pred[,2]
gbm.tune.pred = predict(gbm.tune, newdata=Test, type="prob")
gbm.tune.pred.prob = gbm.tune.pred[,2]
rf.tune.pred = predict(rf.tune, newdata=Test, type="prob")
rf.tune.pred.prob = rf.tune.pred[,2]
glm.tune.pred = predict.train(glm.tune, newdata=Test, type="prob")
glm.tune.pred.prob = glm.tune.pred[,2]
svm.tune.pred = predict.train(svm.tune, newdata=Test, type="prob")
svm.tune.pred.prob = svm.tune.pred[,2]
xGBM = .99
xRF = .01
xGLM = .0
xSVM = .0
xKNN = .0
Probability1 = (gbm.tune.pred.prob*xGBM+
rf.tune.pred.prob*xRF+
glm.tune.pred.prob*xGLM+
svm.tune.pred.prob*xSVM+
knn.tune.pred.prob*xKNN
)
MySubmission.Tuned = data.frame(UniqueID = NewsTest$UniqueID, Probability1)
write.csv(MySubmission.Tuned, "SubmissionTuned.csv", row.names=FALSE)
xGBM = .32
xRF = .29
xGLM = .12
xSVM = .27
xKNN = .0
Probability1 = (gbm.tune.pred.prob*xGBM+
rf.tune.pred.prob*xRF+
glm.tune.pred.prob*xGLM+
svm.tune.pred.prob*xSVM+
knn.tune.pred.prob*xKNN
)
MySubmission.Tuned = data.frame(UniqueID = NewsTest$UniqueID, Probability1)
write.csv(MySubmission.Tuned, "SubmissionTuned.csv", row.names=FALSE)
xGBM = .45
xRF = .55
xGLM = .00
xSVM = .00
xKNN = .0
Probability1 = (gbm.tune.pred.prob*xGBM+
rf.tune.pred.prob*xRF+
glm.tune.pred.prob*xGLM+
svm.tune.pred.prob*xSVM+
knn.tune.pred.prob*xKNN
)
MySubmission.Tuned = data.frame(UniqueID = NewsTest$UniqueID, Probability1)
write.csv(MySubmission.Tuned, "SubmissionTuned.csv", row.names=FALSE)
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl,useInternal=TRUE)
library(XML)
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl,useInternal=TRUE)
scores <- xpathSApply(doc,"//li[@class='score']",xmlValue)
teams <- xpathSApply(doc,"//li[@class='team-name']",xmlValue)
scores
teams
library(XML)
fileUrl <- "http://espn.go.com/fantasy/football/story/_/id/12872303/qb-rankings-2015"
doc <- htmlTreeParse(fileUrl,useInternal=TRUE)
TopQB <- xpathSApply(doc,"//li[@class="inline-table">']",xmlValue)
TopQB <- xpathSApply(doc,"//li[@class='inline-table']",xmlValue)
setwd("~/R/JohnsHopkins/GettingCleaningData/Week2")
###########################
# File: ESPN Projections.R
# Description: Downloads Fantasy Football Projections from ESPN.com
# Date: 3/3/2013
# Author: Isaac Petersen (isaac@fantasyfootballanalytics.net)
# Notes:
# To do:
###########################
#Load libraries
library("XML")
library("stringr")
library("ggplot2")
library("plyr")
library("data.table")
#Functions
source(paste(getwd(),"/R Scripts/Functions/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/Functions/League Settings.R", sep=""))
#Projection Info
suffix <- "espn"
#Download fantasy football projections from ESPN.com
espn_base_url <- paste0("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=", season, "&scoringPeriodId=")
espn_pos <- list(QB=0, RB=2, WR=4, TE=6, K=17, DST=16)
espn_pages <- c("0","40","80")
espn_urls <- paste0(espn_base_url, "&slotCategoryId=", rep(espn_pos, each=length(espn_pages)), "&startIndex=", espn_pages)
#Scrape
espn <- lapply(espn_urls, function(x){data.table(readHTMLTable(x, as.data.frame=TRUE, stringsAsFactors=FALSE)$playertable_0)})
espnList <- espn
#Clean data
qbNames <- rbNames <- wrNames <- teNames <- kNames <- dstNames <- c("rank","player","passCompAtt","passYds","passTds","passInt","rushAtt","rushYds","rushTds","rec","recYds","recTds","points")
for(i in 1:length(espnList)) {
if(nrow(espnList[[i]]) > 0){
#Add position to projection
espnList[[i]][,pos := rep(names(espn_pos), each=length(espn_pages))[i]]
espnList[[i]][,pos := as.factor(pos)]
#Trim dimensions
espnList[[i]] <- espnList[[i]][2:nrow(espnList[[i]])]
#Add variable names
if(unique(espnList[[i]][,pos]) == "QB"){
setnames(espnList[[i]], c(qbNames, "pos"))
} else if(unique(espnList[[i]][,pos]) == "RB"){
setnames(espnList[[i]], c(rbNames, "pos"))
} else if(unique(espnList[[i]][,pos]) == "WR"){
setnames(espnList[[i]], c(wrNames, "pos"))
} else if(unique(espnList[[i]][,pos]) == "TE"){
setnames(espnList[[i]], c(teNames, "pos"))
} else if(unique(espnList[[i]][,pos]) == "K"){
setnames(espnList[[i]], c(kNames, "pos"))
} else if(unique(espnList[[i]][,pos]) == "DST"){
setnames(espnList[[i]], c(dstNames, "pos"))
}
}
}
#Merge
projections_espn <- rbindlist(espnList, use.names=TRUE, fill=TRUE)
#Replace symbols with value of zero
projections_espn[which(passCompAtt == "--/--"), passCompAtt := "0/0"]
projections_espn[which(passYds == "--"), passYds := "0"]
projections_espn[which(passTds == "--"), passTds := "0"]
projections_espn[which(passInt == "--"), passInt := "0"]
projections_espn[which(rushAtt == "--"), rushAtt := "0"]
projections_espn[which(rushYds == "--"), rushYds := "0"]
projections_espn[which(rushTds == "--"), rushTds := "0"]
projections_espn[which(rec == "--"), rec := "0"]
projections_espn[which(recYds == "--"), recYds := "0"]
projections_espn[which(recTds == "--"), recTds := "0"]
projections_espn[which(points == "--"), points := "0"]
#Separate pass completions from attempts
projections_espn[, passComp := str_sub(string=passCompAtt, end=str_locate(string=passCompAtt, '/')[,1]-1)]
projections_espn[, passAtt := str_sub(string=passCompAtt, start=str_locate(string=passCompAtt, '/')[,1]+1)]
#Convert variables from character strings to numeric
numericVars <- names(projections_espn)[names(projections_espn) %in% scoreCategories]
projections_espn[, (numericVars) := lapply(.SD, function(x) as.numeric(as.character(x))), .SDcols = numericVars]
#Player teams
projections_espn[,team_espn := str_sub(player, start=str_locate(string=player, ',')[,1]+2, end = str_locate(string=player, ',')[,1]+4)]
projections_espn[,team_espn := str_trim(projections_espn$team_espn, side="right")]
projections_espn[which(pos == "DST"), team_espn := convertTeamAbbreviation(str_sub(projections_espn$player[which(projections_espn$pos == "DST")], end=str_locate(string=projections_espn$player[which(projections_espn$pos == "DST")], " ")[,1]-1))]
projections_espn[,team_espn := cleanTeamAbbreviations(toupper(projections_espn$team_espn))]
#Player names
projections_espn[,name_espn := str_sub(player, end=str_locate(string=player, ',')[,1]-1)]
projections_espn[,name_espn := str_replace_all(name_espn, "\\*", "")]
projections_espn[which(pos == "DST"), name_espn := convertTeamName(projections_espn$team_espn[which(projections_espn$pos == "DST")])]
projections_espn[,name := nameMerge(projections_espn$name_espn)]
#Remove duplicate cases
duplicateCases <- projections_espn[duplicated(name)]$name
projections_espn[which(name %in% duplicateCases),]
#Same name, different player
#projections_espn <- projections_espn[-which(name == "ALEXSMITH" & team_espn == "CIN"),]
#projections_espn <- projections_espn[-which(name == "RYANGRIFFIN" & team_espn == "NO"),]
#projections_espn <- projections_espn[-which(name == "ZACHMILLER" & team_espn == "CHI"),]
#Same player, different position
#dropNames <- c("DEXTERMCCLUSTER")
#dropVariables <- c("pos")
#dropLabels <- c("WR")
#projections_espn2 <- setDT(ddply(projections_espn, .(name), numcolwise(mean), na.rm=TRUE))
#for(i in 1:length(dropNames)){
#  if(dim(projections_espn[-which(name == dropNames[i] & projections_espn[,dropVariables[i], with=FALSE] == dropLabels[i]),])[1] > 0){
#    projections_espn <- projections_espn[-which(name == dropNames[i] & projections_espn[,dropVariables[i], with=FALSE] == dropLabels[i]),]
#  }
#}
#setkeyv(projections_espn2, cols="name")
#setkeyv(projections_espn, cols="name")
#projections_espn <- merge(projections_espn2, projections_espn[,c("name","name_espn","player","pos","team_espn"), with=FALSE], by="name")
#Rename players
#Calculate Overall Rank
projections_espn <- projections_espn[order(-points)][,overallRank := 1:.N]
#Calculate Position Rank
projections_espn <- projections_espn[order(-points)][,positionRank := 1:.N, by=list(pos)]
#Add source
projections_espn$sourceName <- suffix
#Order variables in data set
allVars <- c(prefix, paste(sourceSpecific, suffix, sep="_"), varNames)
keepVars <- allVars[allVars %in% names(projections_espn)]
projections_espn <- projections_espn[,keepVars, with=FALSE]
#Order players by overall rank
projections_espn <- projections_espn[order(projections_espn$overallRank),]
#Density Plot
ggplot(projections_espn, aes(x=points)) + geom_density(fill="blue", alpha=.3) + xlab("Player's Projected Points") + ggtitle("Density Plot of ESPN Projected Points")
ggsave(paste(getwd(),"/Figures/ESPN projections.jpg", sep=""), width=10, height=10)
dev.off()
#Save file
save(projections_espn, file = paste(getwd(), "/Data/ESPN-Projections.RData", sep=""))
write.csv(projections_espn, file=paste(getwd(), "/Data/ESPN-Projections.csv", sep=""), row.names=FALSE)
save(projections_espn, file = paste(getwd(), "/Data/Historical Projections/ESPN-Projections-", season, ".RData", sep=""))
write.csv(projections_espn, file=paste(getwd(), "/Data/Historical Projections/ESPN-Projections-", season, ".csv", sep=""), row.names=FALSE)
Status
###########################
# File: ESPN Projections.R
# Description: Downloads Fantasy Football Projections from ESPN.com
# Date: 3/3/2013
# Author: Isaac Petersen (isaac@fantasyfootballanalytics.net)
# Notes:
# To do:
###########################
#Load libraries
library("XML")
library("stringr")
library("ggplot2")
library("plyr")
library("data.table")
#Functions
source(paste(getwd(),"/R Scripts/Functions/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/Functions/League Settings.R", sep=""))
#Projection Info
suffix <- "espn"
#Download fantasy football projections from ESPN.com
espn_base_url <- paste0("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=", season, "&scoringPeriodId=")
espn_pos <- list(QB=0, RB=2, WR=4, TE=6, K=17, DST=16)
espn_pages <- c("0","40","80")
espn_urls <- paste0(espn_base_url, "&slotCategoryId=", rep(espn_pos, each=length(espn_pages)), "&startIndex=", espn_pages)
#Scrape
espn <- lapply(espn_urls, function(x){data.table(readHTMLTable(x, as.data.frame=TRUE, stringsAsFactors=FALSE)$playertable_0)})
espnList <- espn
#Clean data
qbNames <- rbNames <- wrNames <- teNames <- kNames <- dstNames <- c("rank","player","passCompAtt","passYds","passTds","passInt","rushAtt","rushYds","rushTds","rec","recYds","recTds","points")
for(i in 1:length(espnList)) {
if(nrow(espnList[[i]]) > 0){
#Add position to projection
espnList[[i]][,pos := rep(names(espn_pos), each=length(espn_pages))[i]]
espnList[[i]][,pos := as.factor(pos)]
#Trim dimensions
espnList[[i]] <- espnList[[i]][2:nrow(espnList[[i]])]
#Add variable names
if(unique(espnList[[i]][,pos]) == "QB"){
setnames(espnList[[i]], c(qbNames, "pos"))
} else if(unique(espnList[[i]][,pos]) == "RB"){
setnames(espnList[[i]], c(rbNames, "pos"))
} else if(unique(espnList[[i]][,pos]) == "WR"){
setnames(espnList[[i]], c(wrNames, "pos"))
} else if(unique(espnList[[i]][,pos]) == "TE"){
setnames(espnList[[i]], c(teNames, "pos"))
} else if(unique(espnList[[i]][,pos]) == "K"){
setnames(espnList[[i]], c(kNames, "pos"))
} else if(unique(espnList[[i]][,pos]) == "DST"){
setnames(espnList[[i]], c(dstNames, "pos"))
}
}
}
#Merge
projections_espn <- rbindlist(espnList, use.names=TRUE, fill=TRUE)
#Replace symbols with value of zero
projections_espn[which(passCompAtt == "--/--"), passCompAtt := "0/0"]
projections_espn[which(passYds == "--"), passYds := "0"]
projections_espn[which(passTds == "--"), passTds := "0"]
projections_espn[which(passInt == "--"), passInt := "0"]
projections_espn[which(rushAtt == "--"), rushAtt := "0"]
projections_espn[which(rushYds == "--"), rushYds := "0"]
projections_espn[which(rushTds == "--"), rushTds := "0"]
projections_espn[which(rec == "--"), rec := "0"]
projections_espn[which(recYds == "--"), recYds := "0"]
projections_espn[which(recTds == "--"), recTds := "0"]
projections_espn[which(points == "--"), points := "0"]
#Separate pass completions from attempts
projections_espn[, passComp := str_sub(string=passCompAtt, end=str_locate(string=passCompAtt, '/')[,1]-1)]
projections_espn[, passAtt := str_sub(string=passCompAtt, start=str_locate(string=passCompAtt, '/')[,1]+1)]
#Convert variables from character strings to numeric
numericVars <- names(projections_espn)[names(projections_espn) %in% scoreCategories]
projections_espn[, (numericVars) := lapply(.SD, function(x) as.numeric(as.character(x))), .SDcols = numericVars]
#Player teams
projections_espn[,team_espn := str_sub(player, start=str_locate(string=player, ',')[,1]+2, end = str_locate(string=player, ',')[,1]+4)]
projections_espn[,team_espn := str_trim(projections_espn$team_espn, side="right")]
projections_espn[which(pos == "DST"), team_espn := convertTeamAbbreviation(str_sub(projections_espn$player[which(projections_espn$pos == "DST")], end=str_locate(string=projections_espn$player[which(projections_espn$pos == "DST")], " ")[,1]-1))]
projections_espn[,team_espn := cleanTeamAbbreviations(toupper(projections_espn$team_espn))]
#Player names
projections_espn[,name_espn := str_sub(player, end=str_locate(string=player, ',')[,1]-1)]
projections_espn[,name_espn := str_replace_all(name_espn, "\\*", "")]
projections_espn[which(pos == "DST"), name_espn := convertTeamName(projections_espn$team_espn[which(projections_espn$pos == "DST")])]
projections_espn[,name := nameMerge(projections_espn$name_espn)]
#Remove duplicate cases
duplicateCases <- projections_espn[duplicated(name)]$name
projections_espn[which(name %in% duplicateCases),]
#Same name, different player
#projections_espn <- projections_espn[-which(name == "ALEXSMITH" & team_espn == "CIN"),]
#projections_espn <- projections_espn[-which(name == "RYANGRIFFIN" & team_espn == "NO"),]
#projections_espn <- projections_espn[-which(name == "ZACHMILLER" & team_espn == "CHI"),]
#Same player, different position
#dropNames <- c("DEXTERMCCLUSTER")
#dropVariables <- c("pos")
#dropLabels <- c("WR")
#projections_espn2 <- setDT(ddply(projections_espn, .(name), numcolwise(mean), na.rm=TRUE))
#for(i in 1:length(dropNames)){
#  if(dim(projections_espn[-which(name == dropNames[i] & projections_espn[,dropVariables[i], with=FALSE] == dropLabels[i]),])[1] > 0){
#    projections_espn <- projections_espn[-which(name == dropNames[i] & projections_espn[,dropVariables[i], with=FALSE] == dropLabels[i]),]
#  }
#}
#setkeyv(projections_espn2, cols="name")
#setkeyv(projections_espn, cols="name")
#projections_espn <- merge(projections_espn2, projections_espn[,c("name","name_espn","player","pos","team_espn"), with=FALSE], by="name")
#Rename players
#Calculate Overall Rank
projections_espn <- projections_espn[order(-points)][,overallRank := 1:.N]
#Calculate Position Rank
projections_espn <- projections_espn[order(-points)][,positionRank := 1:.N, by=list(pos)]
#Add source
projections_espn$sourceName <- suffix
#Order variables in data set
allVars <- c(prefix, paste(sourceSpecific, suffix, sep="_"), varNames)
keepVars <- allVars[allVars %in% names(projections_espn)]
projections_espn <- projections_espn[,keepVars, with=FALSE]
#Order players by overall rank
projections_espn <- projections_espn[order(projections_espn$overallRank),]
#Density Plot
ggplot(projections_espn, aes(x=points)) + geom_density(fill="blue", alpha=.3) + xlab("Player's Projected Points") + ggtitle("Density Plot of ESPN Projected Points")
ggsave(paste(getwd(),"/Figures/ESPN projections.jpg", sep=""), width=10, height=10)
dev.off()
#Save file
save(projections_espn, file = paste(getwd(), "/Data/ESPN-Projections.RData", sep=""))
write.csv(projections_espn, file=paste(getwd(), "/Data/ESPN-Projections.csv", sep=""), row.names=FALSE)
save(projections_espn, file = paste(getwd(), "/Data/Historical Projections/ESPN-Projections-", season, ".RData", sep=""))
write.csv(projections_espn, file=paste(getwd(), "/Data/Historical Projections/ESPN-Projections-", season, ".csv", sep=""), row.names=FALSE)
Status
